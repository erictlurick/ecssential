@if (layout(grid) == true) {

/* ==========================================================================
   LAYOUT / GRID
   ========================================================================== */

/**
 * Basic grid.
 *
 * By default, each grid cell is the same width and height as every other cell
 * in the row. Basically they all size to fit by default. For finer control, you
 * can add sizing classes to individual cells. Without these classes, the cells
 * simply divide up the available space as usual. For responsive grids, you can
 * add media query-specific classes to the cells. Individual cells can be aligned
 * vertically to the top, bottom, or middle. When you want all of the cells in a
 * grid to have the same sizing, media, or alignment values, you should be able
 * to just add a single class to the container to avoid unnecessary repetition.
 * Grids can be nested as many levels deep as needed.
 *
 * @philwalton https://github.com/philipwalton/solved-by-flexbox/blob/master/assets/css/components/grid.css
 */

// Predefine the variables below in order to alter and enable specific features.
$grid-prefix: 'l-grid' !default;
$grid-gutter: $base-line-height + rem !default;


.#{$namespace}#{$grid-prefix} {

    &#{&} {
      @include flexbox();
      @include flex-wrap(wrap);
      margin     : 0;
      padding    : 0;
      list-style : none;
    }

    & &__item {
      @include flex(1);
    }

}





/* Grid gutter
   ========================================================================== */

.#{$namespace}#{$grid-prefix}--gutter {

  &#{&} {
    margin-left: -$grid-gutter;

    .#{$namespace}#{$grid-prefix}__item {
      margin-left: $grid-gutter;
    }
  }

}





/* Individual Sizing
   ========================================================================== */

/**
 * When equal widths are not what you want, you can add sizing classes to
 * individual cells. Cells without sizing classes simply divide up the
 * remaining space as normal.
 */


/**
 * A mobile-first approach.
 */

.#{$namespace}#{$grid-prefix}__item {
  &.l-1\/1 {
    @include flex(0, 0, calc(100% - #{$grid-gutter}));
  }
}

.#{$namespace}#{$grid-prefix}__item {
  &.l-1\/2 {
    @include flex(0, 0, calc(50% - #{$grid-gutter}));
  }
}

.#{$namespace}#{$grid-prefix}__item {
  &.l-1\/3 {
    @include flex(0, 0, calc(33.3333% - #{$grid-gutter}));
  }
}

.#{$namespace}#{$grid-prefix}__item {
  &.l-1\/4 {
    @include flex(0, 0, calc(25% - #{$grid-gutter}));
  }
}


/**
 * Responsive modifiers.
 */

@include breakpoint(medium) {

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/1\@medium {
      @include flex(0, 0, calc(100% - #{$grid-gutter}));
    }
  }

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/2\@medium {
      @include flex(0, 0, calc(50% - #{$grid-gutter}));
    }
  }

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/3\@medium {
      @include flex(0, 0, calc(33.3333% - #{$grid-gutter}));
    }
  }

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/4\@medium {
      @include flex(0, 0, calc(25% - #{$grid-gutter}));
    }
  }

}

@include breakpoint(large) {

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/1\@large {
      @include flex(0, 0, calc(100% - #{$grid-gutter}));
    }
  }

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/2\@large {
      @include flex(0, 0, calc(50% - #{$grid-gutter}));
    }
  }

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/3\@large {
      @include flex(0, 0, calc(33.3333% - #{$grid-gutter}));
    }
  }

  .#{$namespace}#{$grid-prefix}__item {
    &.l-1\/4\@large {
      @include flex(0, 0, calc(25% - #{$grid-gutter}));
    }
  }

}





/* Alignment features
   ========================================================================== */

/**
 * Top-aligned grid cells.
 */

.#{$namespace}#{$grid-prefix}--up {
  @include align-items(flex-start);
}


/**
 * Bottom-aligned grid cells.
 */

.#{$namespace}#{$grid-prefix}--down {
  @include align-items(flex-end);
}


/**
 * Vertically centered grid cells.
 */

.#{$namespace}#{$grid-prefix}--between {
  @include align-items(center);
}


/**
 * Justified grid cells.
 */

.#{$namespace}#{$grid-prefix}--justified {
  @include justify-content(center);
}


/**
 * Top-aligned cell.
 */

.#{$namespace}#{$grid-prefix}__item--up {
  @include align-self(flex-start);
}


/**
 * Bottom-aligned cell.
 */

.#{$namespace}#{$grid-prefix}__item--down {
  @include align-self(flex-end);
}


/**
 * Vertically centered cell.
 */

.#{$namespace}#{$grid-prefix}__item--between {
  @include align-self(center);
}


/**
 * The cell takes all of the available space inside the flex container.
 */

.#{$namespace}#{$grid-prefix}__item--adapted {
  @include flex(none);
}

}//endif