// CONTENT
//
// 1. List-bare
// 2. List-fit
// 3. List-inline
// 4. List-ordered
// 5. List-ui

// Predefine the variable below in order to alter and enable specific features.
$lists-namespace: 'o-list' !default;


@if (objects(list-bare) == true) {

/* ==========================================================================
   OBJECTS / LIST-BARE
   ========================================================================== */

/**
 * Strip list-like appearance from lists by removing their bullets, and any
 * indentation.
 */

// Predefine the variable below in order to alter and enable specific features.
$list-bare-namespace: '-bare' !default;


.#{$namespace}#{$lists-namespace}#{$list-bare-namespace} {
  margin-left: 0;
  list-style : none;
}

}//endif





@if (objects(list-fit) == true) {

/* ==========================================================================
   OBJECTS / LIST-FIT
   ========================================================================== */

/**
 * Force a list to occupy 100% of the available width of its parent, e.g.:
 *
   <ul class="o-list-fit">
     <li class="o-list-fit__item">élément 1</li>
     <li class="o-list-fit__item">élément 2</li>
     <li class="o-list-fit__item">élément 3</li>
     <li class="o-list-fit__item">élément 4</li>
   </ul>
 */

// Predefine the variable below in order to alter and enable specific features.
$list-fit-namespace: '-fit' !default;


.#{$namespace}#{$lists-namespace}#{$list-fit-namespace} {

  &#{&} {
    display    : table;
    width      : 100%;
    margin-left: 0;
  }

  > .#{$namespace}#{$lists-namespace}#{$list-fit-namespace}__item {
    display: table-cell;

    > a {
      display: block;
    }
  }
}

}//endif





@if (objects(list-inline) == true) {

/* ==========================================================================
   OBJECTS / LIST-INLINE
   ========================================================================== */

/**
 * The list-inline object simply displays a list of items in one line with
 * possible style variants, e.g.:
 *
   <ul class="o-list-inline">
     <li class="o-list-inline__item">element 1</li>
     <li class="o-list-inline__item">element 2</li>
   </ul>

   <ul class="[ o-list-inline  o-list-inline--banner ]">
     <li class="o-list-inline__item">element 1</li>
     <li class="o-list-inline__item">element 2</li>
   </ul>

   <ul class="[ o-list-inline  o-list-inline--comma ]">
     <li class="o-list-inline__item">element 1</li>
     <li class="o-list-inline__item">element 2</li>
     <li class="o-list-inline__item">element 3</li>
     <li class="o-list-inline__item">element 4</li>
   </ul>

   <ul class="[ o-list-inline  o-list-inline--dash ]">
     <li class="o-list-inline__item">element 1</li>
     <li class="o-list-inline__item">element 2</li>
     <li class="o-list-inline__item">element 3</li>
     <li class="o-list-inline__item">element 4</li>
   </ul>

   <ul class="[ o-list-inline  o-list-inline--pipe ]">
     <li class="o-list-inline__item">element 1</li>
     <li class="o-list-inline__item">element 2</li>
     <li class="o-list-inline__item">element 3</li>
     <li class="o-list-inline__item">element 4</li>
   </ul>
 */

// Predefine the variables below in order to alter and enable specific features.
$list-inline-namespace: '-inline' !default;
$list-banner-namespace: '--banner' !default;
$list-comma-namespace : '--comma' !default;
$list-dash-namespace  : '--dash' !default;
$list-pipe-namespace  : '--pipe' !default;


.#{$namespace}#{$lists-namespace}#{$list-inline-namespace} {

  &#{&} {
    margin-left: 0;
    list-style : none;
  }

  & &__item {
    display: inline-block;
  }

  // Centres the list.
  &#{&}#{$list-banner-namespace} {
    text-align: center;
  }

  // Applying this class will comma separate your list items.
  &#{&}#{$list-comma-namespace} {

    > .#{$namespace}#{$lists-namespace}#{$list-inline-namespace}__item::after {
      content: '\002C\00A0';
    }

    > .#{$namespace}#{$lists-namespace}#{$list-inline-namespace}__item:last-child::after {
      content: ', etc.';
    }

  }

  // Applying this class will dash separate your list items.
  &#{&}#{$list-dash-namespace} {

    > .#{$namespace}#{$lists-namespace}#{$list-inline-namespace}__item::after {
      content: '\00A0\00A0\2013\00A0';
    }

    > .#{$namespace}#{$lists-namespace}#{$list-inline-namespace}__item:last-child::after {
      content: '';
    }

  }

  // Applying this class will pipe separate your list items.
  &#{&}#{$list-pipe-namespace} {

    > .#{$namespace}#{$lists-namespace}#{$list-inline-namespace}__item::after {
      content: '\00A0\007C';
    }

    > .#{$namespace}#{$lists-namespace}#{$list-inline-namespace}__item:last-child::after {
      content: '';
    }

  }

}

}//endif





@if (objects(list-ordered) == true) {

/* ==========================================================================
   OBJECTS / LIST-ORDERED
   ========================================================================== */

/**
 * Apply correct numbering to ordered lists and nested lists, e.g.:
 *
   <ol class="o-list-ordered">
     <li class="o-list-ordered__item">élément 1</li>
     <li class="o-list-ordered__item">élément 2
       <ol class="o-list-ordered">
         <li class="o-list-ordered__item">élément 3</li>
         <li class="o-list-ordered__item">élément 4</li>
       </ol>
     </li>
     <li class="o-list-ordered__item">élément 5</li>
   </ol>
 */

// Predefine the variable below in order to alter and enable specific features.
$list-ordered-namespace: '-ordered' !default;


.#{$namespace}#{$lists-namespace}#{$list-ordered-namespace} {

  &#{&} {
    @include space(margin-left, 0.5);
    list-style   : none;
    counter-reset: ordered;
  }

  .#{$namespace}#{$lists-namespace}#{$list-ordered-namespace}__item {
    &::before {
      content          : counters(ordered, ".") " ";
      counter-increment: ordered;
    }
  }

}

}//endif





@if (objects(list-ui) == true) {

/* ==========================================================================
   OBJECTS / LIST-UI
   ========================================================================== */

/**
 * The UI list object creates blocky list items with a keyline separator out of
 * a `ul` or `ol`.
 */

// Predefine the variable below in order to alter and enable specific features.
$list-ui-namespace      : '-ui' !default;

$show-list-ui-separator : true !default;
$list-ui-color-separator: color(ui-medium) !default;


.#{$namespace}#{$lists-namespace}#{$list-ui-namespace} {

  &#{&} {
    margin    : 0;
    padding   : 0;
    list-style: none;
  }

  & > &__item {

    @include space(padding);

    @if ($show-list-ui-separator == true) {
      background-image   : linear-gradient(to bottom, transparent 50%, $list-ui-color-separator 50%);
      background-position: 0 100%;
      background-repeat  : repeat-x;
      background-size    : 100% rem(strip-units(1px) * ($base-font-size / 10));
    }//endif

  }

  // Tiny list-blocks.
  &#{&}--tiny {
    > .#{$namespace}#{$lists-namespace}#{$list-ui-namespace}__item {
      @include space(padding, $base-spacing-unit-tiny);
    }
  }

  // Small list-blocks.
  &#{&}--small {
    > .#{$namespace}#{$lists-namespace}#{$list-ui-namespace}__item {
      @include space(padding, $base-spacing-unit-small);
    }
  }

  // Large list-blocks.
  &#{&}--large {
    > .#{$namespace}#{$lists-namespace}#{$list-ui-namespace}__item {
      @include space(padding, $base-spacing-unit-large);
    }
  }

  // Huge list-blocks.
  &#{&}--huge {
    > .#{$namespace}#{$lists-namespace}#{$list-ui-namespace}__item {
      @include space(padding, $base-spacing-unit-huge);
    }
  }

}

}//endif